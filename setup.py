#!/usr/bin/env python
# Licensed under a 3-clause BSD style license - see LICENSE.rst

import glob
import os
import sys

import setuptools_bootstrap
from setuptools import setup

#A dirty hack to get around some early import/configurations ambiguities
if sys.version_info[0] >= 3:
    import builtins
else:
    import __builtin__ as builtins
builtins._ASTROPY_SETUP_ = True

import astropy
from astropy.setup_helpers import (register_commands, adjust_compiler,
                                   get_debug_option)
from astropy.version_helpers import get_git_devstr, generate_version_py

# Get some values from the setup.cfg
from distutils import config
conf = config.ConfigParser()
conf.read(['setup.cfg'])
metadata = dict(conf.items('metadata'))

DISTRIBUTION_NAME = metadata.get('name', 'package_name')
PROVIDES = [x.strip() for x in
            metadata.get('provides', DISTRIBUTION_NAME).split()]
DESCRIPTION = metadata.get('description', 'Astropy affiliated package')
AUTHOR = metadata.get('author', '')
AUTHOR_EMAIL = metadata.get('author_email', '')
LICENSE = metadata.get('license', 'unknown')
URL = metadata.get('url', 'http://astropy.org')

# Get the long description from the package's docstring
for package_name in PROVIDES:
    __import__(package_name)
    package = sys.modules[package_name]
    LONG_DESCRIPTION = package.__doc__

# Store the package name in a built-in variable so it's easy
# to get from other parts of the setup infrastructure
builtins._ASTROPY_PROVIDES_ = PROVIDES

# VERSION should be PEP386 compatible (http://www.python.org/dev/peps/pep-0386)
VERSION = '0.0.dev'

# Indicates if this version is a release version
RELEASE = 'dev' not in VERSION

if not RELEASE:
    VERSION += get_git_devstr(False)

for package_name in PROVIDES:
    # Populate the dict of setup command overrides; this should be done before
    # invoking any other functionality from distutils since it can potentially
    # modify distutils' behavior.
    cmdclassd = register_commands(package_name, VERSION, RELEASE)

    # Adjust the compiler in case the default on this platform is to use a
    # broken one.
    adjust_compiler(package_name)

    # Freeze build information in version.py
    generate_version_py(package_name, VERSION, RELEASE, get_debug_option())

# Treat everything in scripts except README.rst as a script to be installed
scripts = [fname for fname in glob.glob(os.path.join('scripts', '*'))
           if os.path.basename(fname) != 'README.rst']


dist_info = {
    'packages': [],
    'ext_modules': [],
    'package_data': {},
    'package_dir': {}
}

try:
    from astropy.setup_helpers import get_package_info

    for package_name in PROVIDES:
        # Get configuration information from all of the various subpackages.
        # See the docstring for setup_helpers.update_package_files for more
        # details.
        package_info = get_package_info(package_name)

        # Merge the info
        dist_info['packages'].extend(package_info['packages'])
        dist_info['ext_modules'].extend(package_info['ext_modules'])
        dist_info['package_data'].update(package_info['package_data'])
        dist_info['package_dir'].update(package_info['package_dir'])

        # Add the package-global data
        dist_info['package_data'].setdefault(package_name, [])
        dist_info['package_data'][package_name].append('data/*')

        # Include all .c files, recursively, including those generated by
        # Cython, since we can not do this in MANIFEST.in with a "dynamic"
        # directory name.
        c_files = []
        for root, dirs, files in os.walk(package_name):
            for filename in files:
                if filename.endswith('.c'):
                    c_files.append(
                        os.path.join(
                            os.path.relpath(root, package_name), filename))
        dist_info['package_data'][package_name].extend(c_files)

except ImportError: # compatibility with Astropy 0.2 - can be removed in cases
                    # where Astropy 0.2 is no longer supported

    from setuptools import find_packages
    from astropy.setup_helpers import filter_packages, update_package_files

    for package_name in PROVIDES:
        # Use the find_packages tool to locate all packages and modules
        dist_info['packages'].extend(filter_packages(find_packages()))

        # A dictionary to keep track of all package data to install
        dist_info['package_data'].setdefault(package_name, [])
        dist_info['package_data'][package_name].append('data/*')

        # Update extensions, package_data, packagenames and package_dirs from
        # any sub-packages that define their own extension modules and package
        # data.  See the docstring for setup_helpers.update_package_files for
        # more details.
        update_package_files(package_name, dist_info['ext_modules'],
                             dist_info['package_data'], dist_info['packages'],
                             dist_info['package_dir'])


setup(name=DISTRIBUTION_NAME,
      version=VERSION,
      description=DESCRIPTION,
      scripts=scripts,
      requires=['astropy'],
      install_requires=['astropy'],
      provides=PROVIDES,
      author=AUTHOR,
      author_email=AUTHOR_EMAIL,
      license=LICENSE,
      url=URL,
      long_description=LONG_DESCRIPTION,
      cmdclass=cmdclassd,
      zip_safe=False,
      use_2to3=True,
      **dist_info
)
